// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pb/main.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UltraQueueInternalClient is the client API for UltraQueueInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UltraQueueInternalClient interface {
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*Task, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*Applied, error)
	Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*Applied, error)
}

type ultraQueueInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewUltraQueueInternalClient(cc grpc.ClientConnInterface) UltraQueueInternalClient {
	return &ultraQueueInternalClient{cc}
}

func (c *ultraQueueInternalClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/UltraQueueInternal/Dequeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ultraQueueInternalClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*Applied, error) {
	out := new(Applied)
	err := c.cc.Invoke(ctx, "/UltraQueueInternal/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ultraQueueInternalClient) Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*Applied, error) {
	out := new(Applied)
	err := c.cc.Invoke(ctx, "/UltraQueueInternal/Nack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UltraQueueInternalServer is the server API for UltraQueueInternal service.
// All implementations must embed UnimplementedUltraQueueInternalServer
// for forward compatibility
type UltraQueueInternalServer interface {
	Dequeue(context.Context, *DequeueRequest) (*Task, error)
	Ack(context.Context, *AckRequest) (*Applied, error)
	Nack(context.Context, *NackRequest) (*Applied, error)
	mustEmbedUnimplementedUltraQueueInternalServer()
}

// UnimplementedUltraQueueInternalServer must be embedded to have forward compatible implementations.
type UnimplementedUltraQueueInternalServer struct {
}

func (UnimplementedUltraQueueInternalServer) Dequeue(context.Context, *DequeueRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedUltraQueueInternalServer) Ack(context.Context, *AckRequest) (*Applied, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedUltraQueueInternalServer) Nack(context.Context, *NackRequest) (*Applied, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}
func (UnimplementedUltraQueueInternalServer) mustEmbedUnimplementedUltraQueueInternalServer() {}

// UnsafeUltraQueueInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UltraQueueInternalServer will
// result in compilation errors.
type UnsafeUltraQueueInternalServer interface {
	mustEmbedUnimplementedUltraQueueInternalServer()
}

func RegisterUltraQueueInternalServer(s grpc.ServiceRegistrar, srv UltraQueueInternalServer) {
	s.RegisterService(&UltraQueueInternal_ServiceDesc, srv)
}

func _UltraQueueInternal_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UltraQueueInternalServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UltraQueueInternal/Dequeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UltraQueueInternalServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UltraQueueInternal_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UltraQueueInternalServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UltraQueueInternal/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UltraQueueInternalServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UltraQueueInternal_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UltraQueueInternalServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UltraQueueInternal/Nack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UltraQueueInternalServer).Nack(ctx, req.(*NackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UltraQueueInternal_ServiceDesc is the grpc.ServiceDesc for UltraQueueInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UltraQueueInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UltraQueueInternal",
	HandlerType: (*UltraQueueInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dequeue",
			Handler:    _UltraQueueInternal_Dequeue_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _UltraQueueInternal_Ack_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _UltraQueueInternal_Nack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/main.proto",
}
